from datetime import datetime
from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from sqlalchemy import select
from config import ADMIN_ID, AUTO_WITHDRAW
from bot.keyboards.inline import get_admin_buttons
from core.api.cashdesk_api import find_user, payout_user
from db.models import Admin, Bank, PaymentUser, User, WithdrawRequest
from db.services.admin import get_active_admin
from db.services.withdraw import create_withdraw, update_withdraw_status
from utils.logger import logger
from aiogram.types import FSInputFile
from sqlalchemy.ext.asyncio import AsyncSession
from bot.states import WithdrawStates
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.types import CallbackQuery



from config import SUPPORT, ADMIN_ID, MAX_AMOUNT

MIN_AMOUNT = 150


router = Router()

command = 'withdraw'

@router.message(F.text == "üì§ –í—ã–≤–µ—Å—Ç–∏")
@router.message(Command(command))
async def withdraw_start(message: types.Message, state: FSMContext, session: AsyncSession):
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞
    admin_telegram_id = await get_active_admin(session)
    if not admin_telegram_id:
        await message.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    logger.info(f"User {message.from_user.id} started deposit process.")
    caption = (
        "<b>üì• <u>–í—ã–≤–æ–¥ —Å—á—ë—Ç–∞</u></b>\n\n"
        "üí≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ <b>–Ω–æ–º–µ—Ä —Å—á—ë—Ç–∞</b> –∏–ª–∏ <b>ID</b>, –∏–∑ –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ –±–∞–ª–∞–Ω—Å.\n\n"
        "üìå –£–±–µ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º."
    )
    try:
        photo = FSInputFile("bot/img/login_img.jpg")
        await message.answer_photo(photo=photo, caption=caption, parse_mode="HTML")
    except FileNotFoundError:
        logger.warning("Image img/login_img.jpg not found.")
        await message.answer(caption, parse_mode="HTML")
    await state.set_state(WithdrawStates.waiting_for_account)


@router.message(WithdrawStates.waiting_for_account)
async def withdraw_account(message: types.Message, state: FSMContext):
    if not message.text.isdigit() or len(message.text) != 9:
        await message.answer(
            "‚ùå ID –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ 9 —Ü–∏—Ñ—Ä.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
        )
        return

    user_id = int(message.text)
    user = await find_user(user_id)

    if not user or user.get('UserId') == 0:
        await message.answer(
            "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–º–µ—Ä –∏ –≤–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞."
        )
        return  

    await state.update_data(account=str(user_id))
    await message.answer(
        f"{user.get('UserId')}: {user.get('Name', '–ò–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"\
        f"üí∏ <b>–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞ (–æ—Ç {MIN_AMOUNT} –¥–æ {MAX_AMOUNT} —Å–æ–º):</b>",
        parse_mode="HTML",
    )
    await state.set_state(WithdrawStates.waiting_for_amount)


@router.message(WithdrawStates.waiting_for_amount)
async def withdraw_amount(message: types.Message, state: FSMContext, session: AsyncSession):
    if (
        not message.text.isdigit()
        or int(message.text) < MIN_AMOUNT
        or int(message.text) > MAX_AMOUNT
    ):
        logger.warning(
            f"User {message.from_user.id} entered invalid withdraw amount: {message.text}"
        )
        await message.answer(
            f"‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (–æ—Ç {MIN_AMOUNT} –¥–æ {MAX_AMOUNT}).",
            parse_mode="HTML",
        )
        return

    amount = int(message.text)
    await state.update_data(amount=amount)
    logger.info(f"User {message.from_user.id} entered withdraw amount: {amount}")

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –±–∞–Ω–∫–æ–≤ –∏–∑ –ë–î
    result = await session.execute(select(Bank))
    banks = result.scalars().all()

    if banks:
        buttons = [
            InlineKeyboardButton(text=bank.name, callback_data=f"bank_{bank.id}")
            for bank in banks
        ]

        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Ä—è–¥—ã –ø–æ 2 –∫–Ω–æ–ø–∫–∏
        keyboard_rows = [buttons[i:i + 2] for i in range(0, len(buttons), 2)]

        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_rows)
    else:
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–ë–∞–Ω–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", callback_data="no_bank")]
            ]
        )

    await message.answer(
        "üè¶ <b>–í—ã–±–µ—Ä–∏—Ç–µ –±–∞–Ω–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤:</b>",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await state.set_state(WithdrawStates.waiting_for_bank)

@router.callback_query(WithdrawStates.waiting_for_bank, F.data.startswith("bank_"))
async def process_bank_selection(callback: CallbackQuery, state: FSMContext):
    bank_id = int(callback.data.split("_")[1])
    await state.update_data(bank_id=bank_id)

    await callback.message.edit_reply_markup()
    await callback.message.answer(
        "üì± <b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∫ –±–∞–Ω–∫—É:</b>\n"
        "üìå –ü—Ä–∏–º–µ—Ä: +996702388466",
        parse_mode="HTML"
    )
    await state.set_state(WithdrawStates.waiting_for_phone)

@router.message(WithdrawStates.waiting_for_phone)
async def process_phone_number(message: types.Message, state: FSMContext, session: AsyncSession):
    phone_number = message.text.strip()
    data = await state.get_data()

    bank_id = data.get("bank_id")
    telegram_id = message.from_user.id

    # üîç –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id
    result = await session.execute(
        select(User).where(User.telegram_id == telegram_id)
    )
    user = result.scalar_one_or_none()

    if not user:
        # üë§ –°–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        user = User(
            telegram_id=telegram_id,
            full_name=message.from_user.full_name or "–ë–µ–∑ –∏–º–µ–Ω–∏",
            username=message.from_user.username,
            created_at=datetime.utcnow(),
            last_action="start_withdraw"
        )
        session.add(user)
        await session.commit()

    # ‚úÖ –¢–µ–ø–µ—Ä—å —É –Ω–∞—Å –µ—Å—Ç—å user.id, –∞ –Ω–µ telegram_id
    payment_user = PaymentUser(
        user_id=user.id,  # ‚ö†Ô∏è –í–ê–ñ–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º user.id, –∞ –Ω–µ telegram_id
        phone_number=phone_number,
        bank_id=bank_id
    )
    session.add(payment_user)
    await session.commit()

    await message.answer(
        f"""<b>üì§ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –≤—ã–≤–æ–¥—É:</b>\n
üìç–ó–∞—Ö–æ–¥–∏–ºüëá
    üìç1. –ù–∞—Å—Ç—Ä–æ–π–∫–∏!
    üìç2. –í—ã–≤–µ—Å—Ç–∏ —Å–æ —Å—á–µ—Ç–∞!
    üìç3. –ù–∞–ª–∏—á–Ω—ã–µ
    üìç4. –°—É–º–º—É –¥–ª—è –í—ã–≤–æ–¥–∞!
–ì–æ—Ä–æ–¥: –ë–∞—Ç–∫–µ–Ω
–£–ª–∏—Ü–∞: Mm Pay (24/7)
    üìç5. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å
    üìç6. –ü–æ–ª—É—á–∏—Ç—å –ö–æ–¥!
    üìç7. –û—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ –Ω–∞–º
–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã üëá
üíª –û–ø–µ—Ä–∞—Ç–æ—Ä: {SUPPORT}
        """,
        parse_mode="HTML",
    )

    await message.answer("üí≥ –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥: ")
    await state.set_state(WithdrawStates.waiting_for_code)


@router.message(WithdrawStates.waiting_for_code)
async def withdraw_code(message: types.Message, state: FSMContext, bot, session: AsyncSession):
    from db.services.admin import get_active_admin
    from db.models import User, PaymentUser, Bank
    from db.services.user import get_or_create_user

    await state.update_data(code=message.text)
    data = await state.get_data()

    # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await get_or_create_user(
        session,
        telegram_id=message.from_user.id,
        full_name=message.from_user.full_name,
        username=message.from_user.username,
    )
    db_user_id = user.id

    # –ü–æ–ª—É—á–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã (PaymentUser)
    payment_user = await session.scalar(
        select(PaymentUser).where(PaymentUser.user_id == db_user_id)
    )

    if not payment_user:
        await message.answer("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞
    bank = await session.scalar(select(Bank).where(Bank.id == payment_user.bank_id))
    bank_name = bank.name if bank else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±–∞–Ω–∫"

    try:
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –≤—ã–≤–æ–¥–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        withdraw = await create_withdraw(
            session=session,
            user_id=db_user_id,
            account_id=data.get('account'),  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º ID –±–∞–Ω–∫–∞
            amount=data.get('amount'),
            payment_details=f'{payment_user.bank.name}: {payment_user.phone_number}',  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            confirmation_code=data.get('code'),
            status='pending',
            
        )
    except ValueError as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        return
    except Exception as e:
        logger.error(f"Error creating withdraw: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏")
        return

    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞
    admin_telegram_id = await get_active_admin(session)
    if not admin_telegram_id:
        await message.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    text = ""
    if AUTO_WITHDRAW:
        text = "‚ùå <b>–ê–≤—Ç–æ –≤—ã–≤–æ–¥ –æ—Ç–∫–ª—é—á–µ–Ω, –≤—ã–≤–æ–¥–∏—Ç —Å–æ —Å—á—ë—Ç –≤ —Ä—É—á–Ω—É—é!</b>"
    text = (
        f"<b>üì§ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥</b>\n\n"
        f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> @{message.from_user.username or message.from_user.full_name} (ID: <code>{message.from_user.id}</code>)\n"
        f"üè¶ <b>–ë–∞–Ω–∫:</b> {bank_name}\n"
        f"üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {payment_user.phone_number}\n"
        f"‚úÖ <b>–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ:</b> {data.get('code')}\n"
        f"üí∞ <b>–°—É–º–º–∞:</b> {data.get('amount')} —Å–æ–º\n"
        f"üìå <b>–ó–∞—è–≤–∫–∞ ‚Ññ{withdraw.id}</b>\n\n"
        f"üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–¥ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ.\n" + text
    )

    await bot.send_message(
        chat_id=admin_telegram_id,
        text=text,
        parse_mode="HTML",
        reply_markup=get_admin_buttons(withdraw.id, command),
    )

    await message.answer(
        "‚úÖ <b>–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!</b>\n‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.\nüõü SUPPORT: " + SUPPORT,
        parse_mode="HTML",
    )
    await state.clear()



@router.callback_query(F.data.startswith(f"approve_{command}:"))
async def approve_withdraw(call: types.CallbackQuery, bot, session: AsyncSession):
    withdraw_id = int(call.data.split(":")[1])

    # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É –Ω–∞ –≤—ã–≤–æ–¥
    query = select(WithdrawRequest).where(WithdrawRequest.id == withdraw_id)
    result = await session.execute(query)
    withdraw = result.scalar_one_or_none()

    if not withdraw:
        await call.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    query = select(Admin).where(Admin.telegram_id == call.from_user.id)
    result = await session.execute(query)
    admin = result.scalar_one_or_none()

    if not admin:
        await call.answer("‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    admin_id = admin.id
    admin_telegram_id = await get_active_admin(session)


    try:
        withdraw_request = await payout_user(
            user_id=withdraw.account_id,
            code=withdraw.confirmation_code,  # –∏–∑ –∑–∞—è–≤–∫–∏
        )
        await update_withdraw_status(session, withdraw_id, "approved", confirmed_by=admin_id)
        if withdraw_request == {}:
            if admin_telegram_id:
                await bot.send_message(
                    chat_id=admin_telegram_id,
                    text="<b>–ê–≤—Ç–æ –≤—ã–≤–æ–¥ –æ—Ç–∫–ª—é—á–µ–Ω, –≤—ã–≤–æ–¥–∏—Ç–µ —Å—á—ë—Ç –≤ —Ä—É—á–Ω—É—é!</b>",
                    parse_mode="HTML",
                )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–ª–∞—Ç–µ: {e}")
        await call.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–ª–∞—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤", show_alert=True)
        return
    
    query = select(User).where(User.id == withdraw.user_id)
    result = await session.execute(query)
    user = result.scalar_one_or_none()

    if not user:
        await call.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    try:
        await bot.send_message(
            chat_id=user.telegram_id,
            text="‚úÖ <b>–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!</b>",
            parse_mode="HTML",
        )
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞
        if admin_telegram_id:
            await bot.send_message(
                chat_id=admin_telegram_id,
                text="‚úÖ <b>–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!</b>",
                parse_mode="HTML",
            )

        await call.message.edit_text(
            call.message.text,
            parse_mode="HTML",
            reply_markup=None,
        )
        await call.answer("–ó–∞—è–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ ‚úÖ")
    except Exception as e:
        logger.error(f"Error sending withdraw approval message: {e}")
        await call.answer(f"–û—à–∏–±–∫–∞: {e}", show_alert=True)


@router.callback_query(F.data.startswith(f"decline_{command}:"))
async def decline_withdraw(call: types.CallbackQuery, bot, session: AsyncSession):
    from db.services.admin import get_active_admin
    from sqlalchemy.future import select
    
    withdraw_id = int(call.data.split(":")[1])
    logger.info(f"Admin declined withdraw USER ID {withdraw_id}")

    # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É –∏–∑ –ë–î
    query = select(WithdrawRequest).where(WithdrawRequest.id == withdraw_id)
    result = await session.execute(query)
    withdraw = result.scalar_one_or_none()

    if not withdraw:
        await call.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return

    # –ù–∞—Ö–æ–¥–∏–º –∞–¥–º–∏–Ω–∞ –ø–æ telegram_id
    query = select(Admin).where(Admin.telegram_id == call.from_user.id)
    result = await session.execute(query)
    admin = result.scalar_one_or_none()

    if not admin:
        await call.answer("‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    admin_id = admin.id
    await update_withdraw_status(session, withdraw.id, "declined", confirmed_by=admin_id)
    
    query = select(User).where(User.id == withdraw.user_id)
    result = await session.execute(query)
    user = result.scalar_one_or_none()

    if not user:
        await call.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    try:
        await bot.send_message(
            chat_id=user.telegram_id,
            text="‚ùå <b>–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!</b>",
            parse_mode="HTML",
        )
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞
        admin_telegram_id = await get_active_admin(session)
        if admin_telegram_id:
            await bot.send_message(
                chat_id=admin_telegram_id,
                text="‚ùå <b>–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!</b>",
                parse_mode="HTML",
            )

        await call.message.edit_text(
            call.message.text,
            parse_mode="HTML",
            reply_markup=None,
        )
        await call.answer("–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ ‚ùå")
    except Exception as e:
        logger.error(f"Error sending withdraw decline message: {e}")
        await call.answer(f"–û—à–∏–±–∫–∞: {e}", show_alert=True)