from aiogram import Router, types, F
from aiogram.filters import CommandStart
from utils.logger import logger
from bot.keyboards.inline import menu
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from config import SUPPORT, BOT_NAME
from db.services.user import get_or_create_user
from sqlalchemy.ext.asyncio import AsyncSession


router = Router()

@router.message(CommandStart())
async def cmd_start(message: types.Message, session: AsyncSession):
    logger.info(f"User {message.from_user.id} started the bot.")
    try:
        user = await get_or_create_user(
            session, 
            telegram_id=message.from_user.id,
            full_name=message.from_user.full_name,
            username=message.from_user.username
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    await message.answer(
        f"<b>üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <u>{BOT_NAME}</u>!</b>, {user.full_name or user.username or '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}!\n\n"
        "üíº <i>–£ –Ω–∞—Å –≤—ã –º–æ–∂–µ—Ç–µ –ª–µ–≥–∫–æ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –∏–ª–∏ –≤—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞.</i>\n\n"
        "üîΩ <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ</b> ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É üëá\n\n"
        f'üõü –ü–æ–¥–¥–µ—Ä–∂–∫–∞: <a href="https://t.me/{SUPPORT}">@{SUPPORT}</a>',
        reply_markup=menu,
        parse_mode="HTML",
    )



@router.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")
@router.message(Command("cancel"))
async def cancel(message: types.Message, state: FSMContext):
    try:
        await state.clear()
        logger.info(f"User {message.from_user.id} canceled an action.")
        await message.answer(
            "‚ùå <b>–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.</b>", parse_mode="HTML", reply_markup=menu
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –¥–µ–π—Å—Ç–≤–∏—è: {e}")



@router.message(F.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
@router.message(Command("menu"))
async def main_menu(message: types.Message, session: AsyncSession, state: FSMContext):
    logger.info(f"User {message.from_user.id} returned to main menu.")
    try:
        user = await get_or_create_user(
            session, 
            telegram_id=message.from_user.id,
            full_name=message.from_user.full_name,
            username=message.from_user.username
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    await state.clear()
    await message.answer(
        "<b>üè† –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <u>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</u></b>\n\n"
        "üì≤ –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω–æ –∏–∑ –¥–µ–π—Å—Ç–≤–∏–π –Ω–∏–∂–µ, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É ‚¨áÔ∏è\n\n"
        f'üõü –ü–æ–¥–¥–µ—Ä–∂–∫–∞: <a href="https://t.me/{SUPPORT}">@{SUPPORT}</a>',
        reply_markup=menu,
        parse_mode="HTML",
    )

