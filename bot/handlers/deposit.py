from datetime import datetime
from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from sqlalchemy import func, select
from config import ADMIN_ID, AUTO_DEPOSIT
from bot.states import DepositStates
from bot.keyboards.inline import get_admin_buttons, get_bank_keyboard
from db.models import Admin, Bank, PaymentMethod, DepositRequest, User
from db.services.admin import get_active_admin
from db.services.deposit import update_deposit_status
from db.services.user import get_or_create_user
from utils.logger import logger
from aiogram.filters import Command
from aiogram.types import FSInputFile
from config import MAX_AMOUNT, MIN_AMOUNT, SUPPORT, ADMIN_ID
from core.api.cashdesk_api import deposit_user, find_user
from sqlalchemy.ext.asyncio import AsyncSession
from db.services.deposit import create_deposit  
from db.db import async_session
import re, os

router = Router()

command = 'deposit'
@router.message(F.text == "üì• –ü–æ–ø–æ–ª–Ω–∏—Ç—å")
@router.message(Command(command))
async def deposit_start(message: types.Message, state: FSMContext, session: AsyncSession):
    try:
        user = await get_or_create_user(
            session, 
            telegram_id=message.from_user.id,
            full_name=message.from_user.full_name,
            username=message.from_user.username
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    admin_telegram_id = await get_active_admin(session)
    if not admin_telegram_id:
        await message.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    logger.info(f"User {message.from_user.id} started deposit process.")
    caption = (
        "<b>üì• <u>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—á—ë—Ç–∞</u></b>\n\n"
        "üí≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ <b>–Ω–æ–º–µ—Ä —Å—á—ë—Ç–∞</b> –∏–ª–∏ <b>ID</b>, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å.\n\n"
        "üìå –£–±–µ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º."
    )
    try:
        photo = FSInputFile("bot/img/login_img.jpg")
        await message.answer_photo(photo=photo, caption=caption, parse_mode="HTML")
    except FileNotFoundError:
        logger.warning("Image img/login_img.jpg not found.")
        await message.answer(caption, parse_mode="HTML")
    await state.set_state(DepositStates.waiting_for_account)

@router.message(DepositStates.waiting_for_account)
async def deposit_account(message: types.Message, state: FSMContext):
    
    if not message.text.isdigit() or len(message.text) != 9:
        await message.answer(
            "‚ùå ID –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ 9 —Ü–∏—Ñ—Ä.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
        )
        return

    user_id = int(message.text)
    user = await find_user(user_id)

    if not user or user.get('UserId') == 0:
        await message.answer(
            "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–º–µ—Ä –∏ –≤–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞."
        )
        return  

    await state.update_data(account=str(user_id))
    await message.answer(f"{user.get('UserId')}: {user.get('Name', '–ò–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ')}")
    await message.answer(
        f"üí∏ <b>–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è (–æ—Ç {MIN_AMOUNT} –¥–æ {MAX_AMOUNT} —Å–æ–º):</b>",
        parse_mode="HTML",
    )
    await state.set_state(DepositStates.waiting_for_amount)




@router.message(DepositStates.waiting_for_amount)
async def deposit_amount(message: types.Message, state: FSMContext, session: AsyncSession):
    if (
        not message.text.isdigit()
        or int(message.text) < MIN_AMOUNT
        or int(message.text) > MAX_AMOUNT
    ):
        logger.warning(
            f"User {message.from_user.id} entered invalid deposit amount: {message.text}"
        )
        await message.answer(
            f"‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (—á–∏—Å–ª–æ –æ—Ç {MIN_AMOUNT} –¥–æ {MAX_AMOUNT}).",
            parse_mode="HTML",
        )
        return

    await state.update_data(amount=message.text)
    logger.info(
        f"User {message.from_user.id} entered deposit amount: {message.text}"
    )


    keyboard = await get_bank_keyboard(session)
    await message.answer(
        "üè¶ <b>–í—ã–±–µ—Ä–∏—Ç–µ –±–∞–Ω–∫ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:</b>",
        reply_markup=keyboard,
        parse_mode="HTML",
    )
    await state.set_state(DepositStates.waiting_for_bank_choice)

@router.callback_query(DepositStates.waiting_for_bank_choice)
async def handle_bank_choice(call: types.CallbackQuery, state: FSMContext, session: AsyncSession):
    await call.answer()
    bank_name = call.data.replace("bank_", "")

    data = await state.get_data()
    amount = int(data["amount"])

    bank = await session.scalar(
        select(Bank).where(func.lower(Bank.name) == bank_name.lower())
    )
    if not bank:
        await call.message.answer("‚ö†Ô∏è –ë–∞–Ω–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
        return

    payment_method = await session.scalar(
        select(PaymentMethod)
        .where(PaymentMethod.bank_id == bank.id, PaymentMethod.is_active == True)
        .limit(1)
    )
    if not payment_method:
        await call.message.answer("‚ö†Ô∏è –î–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –±–∞–Ω–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞.")
        return

    await state.update_data(payment_method_id=payment_method.id)

    caption = (
        f"<b>üì≤ –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ {bank.name} ({payment_method.title})</b>\n\n"
        f"üë§ <b>–ü–æ–ª—É—á–∞—Ç–µ–ª—å:</b> <code>{data.get('account') or '–Ω–µ —É–∫–∞–∑–∞–Ω'}</code>\n"
        f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> +996 <code>{payment_method.phone_number or '–Ω–µ —É–∫–∞–∑–∞–Ω'}</code>\n"
        f"üí≥ <b>–ù–æ–º–µ—Ä —Å—á—ë—Ç–∞:</b> <code>{payment_method.account_number or '–Ω–µ —É–∫–∞–∑–∞–Ω'}</code>\n"
        # f"üîó <b>–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É:</b> {payment_method.payment_url or '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
        # f"üìù <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {payment_method.comment or '–Ω–µ—Ç'}\n"
    )


    try:
        photo = FSInputFile(payment_method.qr_photo)
        await call.message.answer_photo(photo=photo, caption=caption, parse_mode="HTML")
    except FileNotFoundError:
        logger.warning(f"Image {payment_method.qr_photo} not found.")
        await call.message.answer(caption, parse_mode="HTML")

    await call.message.answer(
        "üì∑ <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –∏–ª–∏ —Ñ–æ—Ç–æ —á–µ–∫–∞:</b>",
        parse_mode="HTML",
    )
    await state.set_state(DepositStates.waiting_for_receipt)


@router.message(DepositStates.waiting_for_receipt, F.photo)
async def deposit_receipt(message: types.Message, state: FSMContext, bot, session: AsyncSession):
    from db.services.admin import get_active_admin  # –µ—Å–ª–∏ —Ç—ã –≤—ã–Ω–µ—Å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é

    data = await state.get_data()
    photo_id = message.photo[-1].file_id

    user_id = message.from_user.id
    account_id = str(data.get("account"))
    amount = float(data.get("amount"))
    payment_method_id = int(data.get("payment_method_id"))

    user = await get_or_create_user(
        session,
        telegram_id=message.from_user.id,
        full_name=message.from_user.full_name,
        username=message.from_user.username,
    )
    db_user_id = user.id  # <-- —ç—Ç–æ—Ç id –∏ –Ω–∞–¥–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –≤ create_deposit
    try:

        deposit = await create_deposit(
            session=session,
            user_id=db_user_id,  # –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–Ω–µ—à–Ω–∏–π –∫–ª—é—á
            account_id=str(account_id),
            amount=amount,
            receipt_photo=photo_id,
            status='pending'
        )
    except ValueError as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        return
    except Exception as e:
        logger.error(f"Error creating withdraw: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏")
        return

    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞
    admin_telegram_id = await get_active_admin(session)
    if not admin_telegram_id:
        await message.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    
    text = ""
    if AUTO_DEPOSIT:
        text = "‚ùå <b>–ê–≤—Ç–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ —Å—á—ë—Ç –≤ —Ä—É—á–Ω—É—é!</b>"
    text = (
        f"<b>üì• –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ</b>\n\n"
        f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> @{message.from_user.username or message.from_user.full_name} (ID: <code>{user_id}</code>)\n"
        f"üßæ <b>–°—á—ë—Ç/ID:</b> <code>{deposit.account_id}</code>\n"
        f"üí∞ <b>–°—É–º–º–∞:</b> {deposit.amount} —Å–æ–º\n"
        f"üìå <b>–ó–∞—è–≤–∫–∞ ‚Ññ{deposit.id}</b>\n\n"
        f"üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á–µ–∫ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ.\n" + text
    )

    await bot.send_photo(
        chat_id=admin_telegram_id,
        photo=photo_id,
        caption=text,
        parse_mode="HTML",
        reply_markup=get_admin_buttons(deposit.id, command),
    )

    await message.answer(
        "‚úÖ <b>–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!</b>\n‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.\nüõü SUPPORT: " + SUPPORT,
        parse_mode="HTML",
    )

    await state.clear()


@router.callback_query(F.data.startswith(f"approve_{command}:"))
async def approve_deposit(call: types.CallbackQuery, bot, session: AsyncSession):
    deposit_id = int(call.data.split(":")[1])
    logger.info(f"Admin approved deposit USER ID {deposit_id}")

    # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
    query = select(DepositRequest).where(DepositRequest.id == deposit_id)
    result = await session.execute(query)
    deposit = result.scalar_one_or_none()

    if not deposit:
        await call.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º –∞–¥–º–∏–Ω–∞
    query = select(Admin).where(Admin.telegram_id == call.from_user.id)
    result = await session.execute(query)
    admin = result.scalar_one_or_none()

    if not admin:
        await call.answer("‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    admin_id = admin.id
    admin_telegram_id = await get_active_admin(session)

    # –ó–∞—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try:
        deposit_request = await deposit_user(user_id=deposit.account_id, summa=deposit.amount)
        await update_deposit_status(session, deposit.id, "approved", confirmed_by=admin_id)
        if deposit_request == {}:
            if admin_telegram_id:
                await bot.send_message(
                    chat_id=admin_telegram_id,
                    text="<b>–ê–≤—Ç–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ —Å—á—ë—Ç –≤ —Ä—É—á–Ω—É—é!</b>",
                    parse_mode="HTML",
                )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞—á–∏—Å–ª–µ–Ω–∏–∏ —Å—Ä–µ–¥—Å—Ç–≤: {e}")
        await call.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞—á–∏—Å–ª–µ–Ω–∏–∏ —Å—Ä–µ–¥—Å—Ç–≤", show_alert=True)
        return
    

    query = select(User).where(User.id == deposit.user_id)
    result = await session.execute(query)
    user = result.scalar_one_or_none()

    if not user:
        await call.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    try:
        await bot.send_message(
            chat_id=user.telegram_id,
            text="‚úÖ <b>–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!</b>",
            parse_mode="HTML",
        )
        if admin_telegram_id:
            await bot.send_message(
                chat_id=admin_telegram_id,
                text="‚úÖ <b>–ó–∞—è–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!</b>",
                parse_mode="HTML",
            )

        caption = call.message.caption or ""
        await call.message.edit_caption(
            caption,
            parse_mode="HTML",
            reply_markup=None,
        )
        await call.answer("–ó–∞—è–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ ‚úÖ")
    except Exception as e:
        logger.error(f"Error sending approval: {e}")
        await call.answer(f"–û—à–∏–±–∫–∞: {e}", show_alert=True)
        
        
@router.callback_query(F.data.startswith(f"decline_{command}:"))
async def decline_deposit(call: types.CallbackQuery, bot, session: AsyncSession):
    deposit_id = int(call.data.split(":")[1])
    logger.info(f"Admin declined deposit ID {deposit_id}")

    query = select(DepositRequest).where(DepositRequest.id == deposit_id)
    result = await session.execute(query)
    deposit = result.scalar_one_or_none()

    if not deposit:
        await call.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    query = select(Admin).where(Admin.telegram_id == call.from_user.id)
    result = await session.execute(query)
    admin = result.scalar_one_or_none()

    if not admin:
        await call.answer("‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    admin_id = admin.id
    await update_deposit_status(session, deposit.id, "declined", confirmed_by=admin_id)

    query = select(User).where(User.id == deposit.user_id)
    result = await session.execute(query)
    user = result.scalar_one_or_none()

    if not user:
        await call.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    try:
        await bot.send_message(
            chat_id=user.telegram_id,
            text="‚ùå <b>–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!</b>",
            parse_mode="HTML",
        )
        admin_telegram_id = await get_active_admin(session)
        if admin_telegram_id:
            await bot.send_message(
                chat_id=admin_telegram_id,
                text="‚ùå <b>–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!</b>",
                parse_mode="HTML",
            )
        caption = call.message.caption or ""
        await call.message.edit_caption(
            caption,
            parse_mode="HTML",
            reply_markup=None,
        )
        await call.answer("–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ ‚ùå")
    except Exception as e:
        logger.error(f"Error sending decline: {e}")
        await call.answer(f"–û—à–∏–±–∫–∞: {e}", show_alert=True)
